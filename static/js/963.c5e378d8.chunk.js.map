{"version":3,"file":"static/js/963.c5e378d8.chunk.js","mappings":"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","sources":["Components/MovieCard/MovieCard.tsx","Components/MoviesTable/MoviesTable.tsx","Components/Pagination/Pagination.tsx","Components/Popular/PopularPage.tsx"],"sourcesContent":["import React from 'react';\r\nimport {FetchedItemType} from \"../Types/Types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst MovieCard:React.FC<FetchedItemType> = ({poster_path, title, overview, vote_average, id}) => {\r\n    return (\r\n        <Link to={`/movie-app-ts/search/${id}`} className=\"movie-card\">\r\n            <div className=\"overlay\">\r\n                <h3>{title}</h3>\r\n                <p>{overview}</p>\r\n            </div>\r\n\r\n            <div className={\"rate-circle \" + (vote_average >= 8 ? \"good\" : vote_average > 4 ? \"normal\" : \"bad\")}>{vote_average}</div>\r\n\r\n            <img\r\n                src={poster_path?`https://image.tmdb.org/t/p/w200${poster_path}`:`https://ih1.redbubble.net/image.370389900.3139/flat,750x,075,f-pad,750x1000,f8f8f8.u4.jpg`}\r\n                alt={`${title} Poster`}\r\n            />\r\n\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport MovieCard from \"../MovieCard/MovieCard\";\r\nimport {FetchedItemType} from \"../Types/Types\";\r\n\r\nconst MoviesTable:React.FC<{isLoading: boolean, movies: FetchedItemType[]}> = ({isLoading, movies}) => {\r\n    return (\r\n        <div className=\"movie-grid\">\r\n            {isLoading ? [...new Array(20)].map((v, i) => <Skeleton key={i} baseColor={\"#5d5c5c\"} highlightColor={\"#858585\"} height={300} width={200}/>) : movies.map((movie) => (\r\n                <MovieCard {...movie} key={movie.id} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviesTable;","import React from 'react';\r\n\r\nconst Pagination:React.FC<{ total_pages: number, page: number, onClickHandler: any }> = ({total_pages, page, onClickHandler}) => {\r\n    let totalPages = Math.min(total_pages, 500)\r\n    let numbers = []\r\n\r\n    for (let i = 0; i < totalPages; i++) {\r\n        numbers.push(i+1)\r\n    }\r\n\r\n    if (page > 4){\r\n        numbers = numbers.splice(page - 4, 9)\r\n    } else if (page <= 4){\r\n        numbers = numbers.splice(0, 9)\r\n    } else {\r\n        numbers = numbers.splice(490, 9)\r\n    }\r\n\r\n    if (total_pages < 2){\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className='pagination'>\r\n            {page > 4 ? <><span onClick={() => onClickHandler(1)} className={'pagination-number' + (page === 1 ? ' active-page' : '')}>1</span><span className='pagination-number'> ... </span></> : ''}\r\n            {numbers.map(num => <span onClick={() => onClickHandler(num)} key={num} className={'pagination-number' + (page === num ? ' active-page' : '')}>{num}</span>)}\r\n            {page < totalPages - 4 ? <><span className='pagination-number'> ... </span><span onClick={() => onClickHandler(totalPages)} className={'pagination-number' + (page === totalPages ? ' active-page' : '')}>{totalPages}</span></> : ''}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, {useEffect} from 'react';\r\nimport {\r\n    currentPageSelector,\r\n    fetchPopular,\r\n    isLoadingPopularSelector,\r\n    popularSelector,\r\n    setCurrentPage,\r\n    totalPagesSelector\r\n} from \"../../redux/Slices/popularSlice\";\r\nimport {useAppDispatch} from \"../../redux/store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport 'react-loading-skeleton/dist/skeleton.css'\r\nimport MoviesTable from \"../MoviesTable/MoviesTable\";\r\nimport qs from \"qs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst PopularPage:React.FC = () => {\r\n\r\n    const navigate = useNavigate();\r\n    const isMounted = React.useRef(false);\r\n    const dispatch = useAppDispatch()\r\n    const movies = useSelector(popularSelector)\r\n    const totalPages = useSelector(totalPagesSelector)\r\n    const currentPage = useSelector(currentPageSelector)\r\n    const isLoading = useSelector(isLoadingPopularSelector)\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            const params = {\r\n                currentPage,\r\n            };\r\n            const queryString = qs.stringify(params, { skipNulls: true });\r\n            navigate(`?${queryString}`);\r\n        }\r\n        dispatch(fetchPopular(currentPage))\r\n        isMounted.current = true;\r\n    }, [currentPage])\r\n\r\n    React.useEffect(() => {\r\n        if (window.location.search) {\r\n            const params = qs.parse(window.location.search.substring(1));\r\n            dispatch(\r\n                setCurrentPage(Number(params.currentPage)),\r\n            );\r\n        }\r\n        isMounted.current = true;\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"movie-page popular-page\">\r\n            <div className=\"container movie-page__container\">\r\n                <div className=\"subheader\">\r\n                    <h1 className=\"heading\">Popular movies</h1>\r\n                </div>\r\n                <MoviesTable isLoading={isLoading} movies={movies}/>\r\n                <Pagination page={currentPage} total_pages={totalPages} onClickHandler={(num:number) => dispatch(setCurrentPage(num))}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PopularPage;"],"names":["poster_path","title","overview","vote_average","id","to","className","src","alt","isLoading","movies","Array","map","v","i","baseColor","highlightColor","height","width","movie","key","total_pages","page","onClickHandler","totalPages","Math","min","numbers","push","splice","onClick","num","navigate","useNavigate","isMounted","React","dispatch","useAppDispatch","useSelector","popularSelector","totalPagesSelector","currentPage","currentPageSelector","isLoadingPopularSelector","useEffect","current","params","queryString","qs","skipNulls","fetchPopular","window","location","search","substring","setCurrentPage","Number","MoviesTable","Pagination"],"sourceRoot":""}