{"version":3,"file":"static/js/969.eb4f16d9.chunk.js","mappings":"gNAuBA,EAnB4C,SAAH,GAA0D,IAArDA,EAAW,EAAXA,YAAaC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAE,EAAFA,GACtF,OACI,UAAC,KAAI,CAACC,GAAE,+BAA0BD,GAAME,UAAU,aAAY,WAC1D,iBAAKA,UAAU,UAAS,WACpB,wBAAKL,KACL,uBAAIC,QAGR,gBAAKI,UAAW,gBAAkBH,GAAgB,EAAI,OAASA,EAAe,EAAI,SAAW,OAAO,SAAEA,KAEtG,gBACII,IAAKP,EAAY,kCAAD,OAAmCA,GAAW,4FAC9DQ,IAAG,UAAKP,EAAK,eAK7B,ECNA,EAV8E,SAAH,GAA6B,IAAxBQ,EAAS,EAATA,UAAWC,EAAM,EAANA,OACvF,OACI,gBAAKJ,UAAU,aAAY,SACtBG,GAAY,OAAI,IAAIE,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAC,OAAK,SAAC,IAAQ,CAASC,UAAW,UAAWC,eAAgB,UAAWC,OAAQ,IAAKC,MAAO,KAAxEJ,EAA8E,IAAIJ,EAAOE,KAAI,SAACO,GAAK,OAC5J,mBAAC,GAAS,kBAAKA,GAAK,IAAEC,IAAKD,EAAMf,KAAM,KAIvD,C,yDCkBA,IA7BwF,SAAH,GAIjF,IAJ8H,IAAxCiB,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAc,EAAdA,eACrGC,EAAaC,KAAKC,IAAIL,EAAa,KACnCM,EAAU,GAELb,EAAI,EAAGA,EAAIU,EAAYV,IAC5Ba,EAAQC,KAAKd,EAAE,GAWnB,OAPIa,EADAL,EAAO,EACGK,EAAQE,OAAOP,EAAO,EAAG,GAC5BA,GAAQ,EACLK,EAAQE,OAAO,EAAG,GAElBF,EAAQE,OAAO,IAAK,GAG9BR,EAAc,GACP,yBAIP,iBAAKf,UAAU,aAAY,UACtBgB,EAAO,GAAI,iCAAE,iBAAMQ,QAAS,kBAAMP,EAAe,EAAE,EAAEjB,UAAW,qBAAgC,IAATgB,EAAa,eAAiB,IAAI,gBAAS,iBAAMhB,UAAU,oBAAmB,sBAAmB,GACxLqB,EAAQf,KAAI,SAAAmB,GAAG,OAAI,iBAAMD,QAAS,kBAAMP,EAAeQ,EAAI,EAAYzB,UAAW,qBAAuBgB,IAASS,EAAM,eAAiB,IAAI,SAAEA,GAA7EA,EAAwF,IAC1JT,EAAOE,EAAa,GAAI,iCAAE,iBAAMlB,UAAU,oBAAmB,oBAAa,iBAAMwB,QAAS,kBAAMP,EAAeC,EAAW,EAAElB,UAAW,qBAAuBgB,IAASE,EAAa,eAAiB,IAAI,SAAEA,OAAwB,KAG/O,C,6KCiEA,UAxEwB,WAEpB,OAAoCQ,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAC1BC,GAAWC,EAAAA,EAAAA,KACXZ,GAAaa,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1B/B,GAAY4B,EAAAA,EAAAA,IAAYI,EAAAA,IACxB/B,GAAS2B,EAAAA,EAAAA,IAAYK,EAAAA,IACrBC,GAAeN,EAAAA,EAAAA,IAAYO,EAAAA,IAC3BC,GAAaR,EAAAA,EAAAA,IAAYS,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,aAAYC,KAAS,SAACC,GAEpCjB,EADAiB,GACSC,EAAAA,EAAAA,IAAcD,IAEdE,EAAAA,EAAAA,MAEjB,GAAG,MAAO,IA4BV,OA1BAC,EAAAA,EAAAA,YAAU,WACF,GAAIV,EAGG,CACC,IAAMW,EAAS,CACXjB,YAAAA,EACAkB,MAAOZ,GAELa,EAAcC,IAAAA,UAAaH,EAAQ,CAAEI,WAAW,IACtDb,EAAS,IAAD,OAAKW,IAGjBvB,GAAS0B,EAAAA,EAAAA,IAAc,CAACJ,MAAOZ,EAAYvB,KAAMiB,IACrD,MAZIQ,EAAS,IACTZ,GAAS2B,EAAAA,EAAAA,KAYrB,GAAG,CAACvB,EAAaM,KAEjBU,EAAAA,EAAAA,YAAU,WACN,GAAIQ,OAAOC,SAASC,OAAQ,CACxB,IAAMT,EAASG,IAAAA,MAASI,OAAOC,SAASC,OAAOC,UAAU,IACzDhC,EAAcsB,EAAOC,OACrBtB,GAASkB,EAAAA,EAAAA,IAAcG,EAAOC,QAC9BtB,GAASgC,EAAAA,EAAAA,IAAeC,OAAOZ,EAAOjB,cAC1C,CACJ,GAAG,KAGC,gBAAKjC,UAAU,aAAY,UACvB,iBAAKA,UAAU,kCAAiC,WAC5C,iBAAKA,UAAU,YAAW,WACtB,eAAIA,UAAU,UAAS,qBACvB,iBAAKA,UAAU,eAAc,WACzB,kBAAO+D,MAAOpC,EAAYqC,SAAU,SAACC,GACjCrC,EAAcqC,EAAEC,OAAOH,OACvBpB,EAAcsB,EAAEC,OAAOH,MAC3B,EAAGI,KAAK,UACR,iBAAMnE,UAAU,aAAY,SACvBuC,EAAU,UAAMF,EAAY,YAAqB,IAAjBA,EAAqB,QAAU,UAAa,kBAIzF,gBAAKrC,UAAU,0BAAyB,SAClCuC,EAAsC,uBAAzB,4BAEA,IAAlBnC,EAAOgE,QAAiBjE,GAA4F,SAAC,IAAW,CAACA,UAAWA,EAAWC,OAAQA,KAA3H,gBAAKJ,UAAU,kBAAiB,oDACpEuC,IAAc,SAAC,IAAU,CAACvB,KAAMiB,EAAalB,YAAaG,EAC9CD,eAAgB,SAACQ,GAAW,OAAKI,GAASgC,EAAAA,EAAAA,IAAepC,GAAK,QAI3F,C","sources":["Components/MovieCard/MovieCard.tsx","Components/MoviesTable/MoviesTable.tsx","Components/Pagination/Pagination.tsx","Components/Search/Search.tsx"],"sourcesContent":["import React from 'react';\r\nimport {FetchedItemType} from \"../Types/Types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst MovieCard:React.FC<FetchedItemType> = ({poster_path, title, overview, vote_average, id}) => {\r\n    return (\r\n        <Link to={`/movie-app-ts/search/${id}`} className=\"movie-card\">\r\n            <div className=\"overlay\">\r\n                <h3>{title}</h3>\r\n                <p>{overview}</p>\r\n            </div>\r\n\r\n            <div className={\"rate-circle \" + (vote_average >= 8 ? \"good\" : vote_average > 4 ? \"normal\" : \"bad\")}>{vote_average}</div>\r\n\r\n            <img\r\n                src={poster_path?`https://image.tmdb.org/t/p/w200${poster_path}`:`https://ih1.redbubble.net/image.370389900.3139/flat,750x,075,f-pad,750x1000,f8f8f8.u4.jpg`}\r\n                alt={`${title} Poster`}\r\n            />\r\n\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport MovieCard from \"../MovieCard/MovieCard\";\r\nimport {FetchedItemType} from \"../Types/Types\";\r\n\r\nconst MoviesTable:React.FC<{isLoading: boolean, movies: FetchedItemType[]}> = ({isLoading, movies}) => {\r\n    return (\r\n        <div className=\"movie-grid\">\r\n            {isLoading ? [...new Array(20)].map((v, i) => <Skeleton key={i} baseColor={\"#5d5c5c\"} highlightColor={\"#858585\"} height={300} width={200}/>) : movies.map((movie) => (\r\n                <MovieCard {...movie} key={movie.id} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviesTable;","import React from 'react';\r\n\r\nconst Pagination:React.FC<{ total_pages: number, page: number, onClickHandler: any }> = ({total_pages, page, onClickHandler}) => {\r\n    let totalPages = Math.min(total_pages, 500)\r\n    let numbers = []\r\n\r\n    for (let i = 0; i < totalPages; i++) {\r\n        numbers.push(i+1)\r\n    }\r\n\r\n    if (page > 4){\r\n        numbers = numbers.splice(page - 4, 9)\r\n    } else if (page <= 4){\r\n        numbers = numbers.splice(0, 9)\r\n    } else {\r\n        numbers = numbers.splice(490, 9)\r\n    }\r\n\r\n    if (total_pages < 2){\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className='pagination'>\r\n            {page > 4 ? <><span onClick={() => onClickHandler(1)} className={'pagination-number' + (page === 1 ? ' active-page' : '')}>1</span><span className='pagination-number'> ... </span></> : ''}\r\n            {numbers.map(num => <span onClick={() => onClickHandler(num)} key={num} className={'pagination-number' + (page === num ? ' active-page' : '')}>{num}</span>)}\r\n            {page < totalPages - 4 ? <><span className='pagination-number'> ... </span><span onClick={() => onClickHandler(totalPages)} className={'pagination-number' + (page === totalPages ? ' active-page' : '')}>{totalPages}</span></> : ''}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useAppDispatch} from \"../../redux/store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    currentSearchPageSelector,\r\n    fetchNowAired,\r\n    fetchSearched,\r\n    isLoadingSelector,\r\n    querySelector,\r\n    removeItems,\r\n    searchedSelector,\r\n    setCurrentPage,\r\n    setStateQuery,\r\n    totalSearchPagesSelector,\r\n    totalSearchResultsSelector\r\n} from \"../../redux/Slices/searchSlice\";\r\nimport debounce from 'lodash.debounce'\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport MoviesTable from \"../MoviesTable/MoviesTable\";\r\nimport qs from \"qs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Search:React.FC = () => {\r\n\r\n    const [inputQuery, setInputQuery] = useState('')\r\n    const dispatch = useAppDispatch()\r\n    const totalPages = useSelector(totalSearchPagesSelector)\r\n    const currentPage = useSelector(currentSearchPageSelector)\r\n    const isLoading = useSelector(isLoadingSelector)\r\n    const movies = useSelector(searchedSelector)\r\n    const totalResults = useSelector(totalSearchResultsSelector)\r\n    const stateQuery = useSelector(querySelector)\r\n    const navigate = useNavigate();\r\n\r\n    const onInputChange = useCallback(debounce((str) => {\r\n        if (str) {\r\n            dispatch(setStateQuery(str))\r\n        } else {\r\n            dispatch(removeItems())\r\n        }\r\n    }, 1150), [])\r\n\r\n    useEffect(() => {\r\n            if(!stateQuery){\r\n                navigate('')\r\n                dispatch(fetchNowAired())\r\n            } else {\r\n                    const params = {\r\n                        currentPage,\r\n                        query: stateQuery\r\n                    };\r\n                    const queryString = qs.stringify(params, { skipNulls: true });\r\n                    navigate(`?${queryString}`);\r\n\r\n\r\n                dispatch(fetchSearched({query: stateQuery, page: currentPage}))\r\n            }\r\n    }, [currentPage, stateQuery])\r\n\r\n    useEffect(() => {\r\n        if (window.location.search) {\r\n            const params = qs.parse(window.location.search.substring(1)) as unknown as {currentPage: number, query: string};\r\n            setInputQuery(params.query)\r\n            dispatch(setStateQuery(params.query));\r\n            dispatch(setCurrentPage(Number(params.currentPage)),);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"movie-page\">\r\n            <div className=\"container movie-page__container\">\r\n                <div className=\"subheader\">\r\n                    <h1 className=\"heading\">Search</h1>\r\n                    <div className=\"header-input\">\r\n                        <input value={inputQuery} onChange={(e:React.ChangeEvent<HTMLInputElement>) => {\r\n                            setInputQuery(e.target.value)\r\n                            onInputChange(e.target.value)\r\n                        }} type=\"text\"/>\r\n                        <span className=\"count-pill\">\r\n                            {stateQuery ? `${totalResults} ${totalResults === 1 ? \"Movie\" : \"Movies\"}` : \"Search\"}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"movie-page__description\">\r\n                    {!stateQuery ? \"Now Watching In Cinemas\" : `Results of searching`}\r\n                </div>\r\n                {movies.length === 0 && !isLoading ? <div className=\"error-plug plug\">It seems you entered an invalid value!</div> : <MoviesTable isLoading={isLoading} movies={movies}/>}\r\n                {stateQuery && <Pagination page={currentPage} total_pages={totalPages}\r\n                             onClickHandler={(num: number) => dispatch(setCurrentPage(num))}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;"],"names":["poster_path","title","overview","vote_average","id","to","className","src","alt","isLoading","movies","Array","map","v","i","baseColor","highlightColor","height","width","movie","key","total_pages","page","onClickHandler","totalPages","Math","min","numbers","push","splice","onClick","num","useState","inputQuery","setInputQuery","dispatch","useAppDispatch","useSelector","totalSearchPagesSelector","currentPage","currentSearchPageSelector","isLoadingSelector","searchedSelector","totalResults","totalSearchResultsSelector","stateQuery","querySelector","navigate","useNavigate","onInputChange","useCallback","debounce","str","setStateQuery","removeItems","useEffect","params","query","queryString","qs","skipNulls","fetchSearched","fetchNowAired","window","location","search","substring","setCurrentPage","Number","value","onChange","e","target","type","length"],"sourceRoot":""}